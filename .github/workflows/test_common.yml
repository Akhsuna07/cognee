name: test | environments

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  RUNTIME__LOG_LEVEL: ERROR

jobs:
  get_docs_changes:
    name: docs changes
    uses: ./.github/workflows/get_docs_changes.yml

  install_docker:
    if: runner.os == 'macOS'
    runs-on: "ubuntu-latest"
    steps:
      - name: Install Docker
        run: |
          HOMEBREW_NO_AUTO_UPDATE=1 brew install --cask docker
          sudo /Applications/Docker.app/Contents/MacOS/Docker --unattended --install-privileged-components
          open -a /Applications/Docker.app --args --unattended --accept-license
          echo "We are waiting for Docker to be up and running. It can take over 2 minutes..."
          while ! /Applications/Docker.app/Contents/Resources/bin/docker info &>/dev/null; do sleep 1; done

  setup_docker:
    name: Set up Docker Buildx
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest"]
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

  run_common:
    name: test
    needs: get_docs_changes
    if: needs.get_docs_changes.outputs.changes_outside_docs == 'true'
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest"] #, "windows-latest"
        python-version: ["3.11.x"]
        # Test all python versions on ubuntu only
        include:
          - python-version: "3.9.x"
            os: "ubuntu-22.04"
          - python-version: "3.10.x"
            os: "ubuntu-22.04"
#          - python-version: "3.12.x"
#            os: "ubuntu-latest"

    defaults:
      run:
        shell: bash

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: cognee
          POSTGRES_PASSWORD: cognee
          POSTGRES_DB: cognee_db
        volumes:
          - postgres_data:/var/lib/postgresql/data
        ports:
          - 5432:5432

    runs-on: ${{ matrix.os }}

    steps:
      - name: Check out
        uses: actions/checkout@master

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install tzdata on windows
        run: |
          cd %USERPROFILE%
          curl https://data.iana.org/time-zones/releases/tzdata2021e.tar.gz --output tzdata.tar.gz
          mkdir tzdata
          tar --extract --file tzdata.tar.gz --directory tzdata
          mkdir %USERPROFILE%\Downloads\tzdata
          copy tzdata %USERPROFILE%\Downloads\tzdata
          curl https://raw.githubusercontent.com/unicode-org/cldr/master/common/supplemental/windowsZones.xml --output %USERPROFILE%\Downloads\tzdata\windowsZones.xml
        if: runner.os == 'Windows'
        shell: cmd

      - name: Install Poetry
        # https://github.com/snok/install-poetry#running-on-windows
        uses: snok/install-poetry@v1.3.2
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Create .cognee_system directory and print path
        run: |
          mkdir .cognee_system
          echo $(pwd)/.cognee_system

      - name: Wait for PostgreSQL to be ready
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          until pg_isready -h localhost -p 5432 -U cognee; do
            sleep 1
          done

      - name: Run tests
        run: poetry run pytest tests/

      - name: Run default basic pipeline
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LLM_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ENV: 'dev'
          POSTGRES_USER: cognee
          POSTGRES_PASSWORD: cognee
          POSTGRES_DB: cognee_db
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          DESTINATION__POSTGRES__CREDENTIALS__HOST: 127.0.0.1
          DESTINATION__POSTGRES__CREDENTIALS__USERNAME: cognee
          DESTINATION__POSTGRES__CREDENTIALS__PASSWORD: cognee
          DESTINATION__POSTGRES__CREDENTIALS__DATABASE: cognee_db
        run: poetry run python ./cognee/tests/test_library.py

      - name: Clean up disk space
        run: |
          sudo rm -rf ~/.cache
          sudo rm -rf /tmp/*
          df -h

      - name: Build with Poetry
        run: poetry build

      - name: Install Package
        run: |
         cd dist
         pip install *.whl

      # - run: |
      #     poetry run
      #   if: runner.os != 'Windows'
      #   name: Run common tests with minimum dependencies Linux/MAC
      #   env:
      #     OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      #     QDRANT_API_KEY: ${{ secrets.QDRANT_API_KEY }}
      #     QDRANT_API_URL: ${{ secrets.QDRANT_API_URL }}

      # - run: |
      #     poetry run python ./cognee/tests/test_library.py
      #   if: runner.os == 'Windows'
      #   name: Run common tests with minimum dependencies Windows
      #   env:
      #     OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      #     QDRANT_API_KEY: ${{ secrets.QDRANT_API_KEY }}
      #     QDRANT_API_URL: ${{ secrets.QDRANT_API_URL }}
      #   shell: cmd

      # - name: Install  dependencies
      #   run: poetry install --no-interaction

      # - name: Build with Poetry
      #   run: poetry build

      # - name: Install Package
      #   run: |
      #     cd dist
      #     pip install *.whl
          
      # - name: Download NLTK Punkt Tokenizer Models
      #   run: |
      #     python -m nltk.downloader punkt
      # - run: |
      #     poetry run python ./cognee/tests/test_library.py
      #   if: runner.os != 'Windows'
      #   name: Run pipeline smoke tests with minimum deps Linux/MAC
      #   env:
      #     OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      #     QDRANT_API_KEY: ${{ secrets.QDRANT_API_KEY }}
      #     QDRANT_API_URL: ${{ secrets.QDRANT_API_URL }}

      # - name: Download NLTK Punkt Tokenizer Models
      #   run: |
      #     python -m nltk.downloader punkt
      # - run: |
      #     poetry run python ./cognee/tests/test_library.py
      #   if: runner.os == 'Windows'
      #   name: Run smoke tests with minimum deps Windows
      #   env:
      #     OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      #     QDRANT_API_KEY: ${{ secrets.QDRANT_API_KEY }}
      #     QDRANT_API_URL: ${{ secrets.QDRANT_API_URL }}
      #   shell: cmd


  matrix_job_required_check:
    name: common | common tests
    needs: run_common
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check matrix job results
        if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
        run: |
          echo "One or more matrix job tests failed or were cancelled. You may need to re-run them." && exit 1